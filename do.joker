(comment
  "reads maintainers.txt files in elife repositories and creates a report")

(ns foo.fetch
  (:require
   [joker
    [string :as string]
    [pprint :as pprint]
    [os :as os]
    [filepath :as path]]))

(def path-to-repo-dir (path/abs "../clone-update-org-repos"))
(println "directory of repositories:" path-to-repo-dir)

(defn dir-list
  [root]
  (let [exclude? (fn [path]
                   (string/ends-with? path ".git"))]
    (remove exclude?
            (filter (comp :dir? os/stat)
                    (path/glob (str root "/*"))))))

(def repo-list (dir-list path-to-repo-dir))

(defn maintainers
  [repo]
  (let [expected-path (str repo "/maintainers.txt")
        repo-name (path/base repo)]
    (if (os/exists? expected-path)
      (let [owner-list (-> expected-path slurp string/trim string/split-lines)]
        (map (fn [owner]
               [repo-name owner]) owner-list))
      [[repo-name nil]])))

(def repo-owner-pair-list (mapcat maintainers repo-list))

(defn repo-owner-idx
  "returns a map of `{repo: owner-list, ...}`"
  [list-of-pairs]
  (reduce (fn [a [repo owner]]
            (update-in a [repo] conj owner)) {} list-of-pairs))

(defn owner-repo-idx
  "returns a map of `{owner: repo-list, ...}`"
  [list-of-pairs]
  (reduce (fn [a [repo owner]]
            (update-in a [owner] conj repo)) {} list-of-pairs))

(def owner->repo (owner-repo-idx repo-owner-pair-list))
(def repo->owner (repo-owner-idx repo-owner-pair-list))

;; ---

(defn repos-with-sole-owner
  [& [owner]]
  (into {}
        (filter (fn [[repo owner-list]]
                  (if owner
                    (= owner-list [owner])
                    (= (count owner-list) 1))) repo->owner)))

(def repo->single-owner (repos-with-sole-owner))

(def joel "NuclearRedeye")
(def repo->single-owner-joel (sort (keys (repos-with-sole-owner joel))))

;; ---

(defn sep
  [& [lbl]]
  (print (format "\n--- %s\n\n" (or lbl ""))))

(sep)
(pprint/pprint {:num-repos (count repo-list)
                :num-repos-no-owner (count (get owner->repo nil))
                :num-repos-single-owner (count repo->single-owner)
                :num-repos-joel-sole-owner (count repo->single-owner-joel)})

(sep "repositories where Joel is sole owner")
(pprint/pprint repo->single-owner-joel)

(sep "owner repository count")
(pprint/pprint (sort-by second >
                        (map (fn [[owner repo-list]]
                               [owner (count repo-list)]) owner->repo)))

;;(sep "all repositorys")
;;(pprint/pprint repo-list)

(sep "owners-to-repositories")
(pprint/pprint owner->repo)

(sep "repositories-to-owners")
(pprint/pprint repo->owner)

